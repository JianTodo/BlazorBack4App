@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>
<div class="form-group">
    <label>
        Room:
        <input @bind="roomInput" size="50" />
    </label>
</div>
@*<button @onclick="JoinWithOffer" disabled="@(!IsConnected)">Join Room</button>*@
<button @onclick="JoinRoom" disabled="@(!IsConnected)">Join Room</button>
<div>
    <video id="localVideo" width="640" height="480" playsinline autoplay style="transform:rotateY(180deg);background: #222;"></video>
    <video id="remoteVideo" width="640" height="480" playsinline autoplay style="transform:rotateY(180deg);background: #222;"></video>
</div>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;

    [Inject] private IJSRuntime Js { get; set; }
    private IJSObjectReference? Module { get; set; }
    private string roomInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add($"{user}: {message}");
            StateHasChanged();
        });

        // 當B進入，A會先去產生offer, 傳送給群組
        hubConnection.On<string, string>("ReceiveJoinMessage", async (user, message) =>
        {
            try
            {
                if (!string.Equals(userInput, user))
                {
                    messages.Add(message);
                    var offer = await this.Module.InvokeAsync<string>("getOffer");
                    await hubConnection.SendAsync("SendOffer", userInput, roomInput, offer);
                }
            }
            catch (Exception e)
            {
                messages.Add(e.Message);
            }
            StateHasChanged();
        });

        // B 收到去 set 遠端的 offer, 並產生 answwer 讓 A 來用
        hubConnection.On<string, string, string>("ReceiveOfferMessage", async (user, offer, message) =>
        {
            try
            {
                if (!string.Equals(userInput, user))
                {
                    messages.Add(message);
                    var answer = await this.Module.InvokeAsync<string>("getAnswer", offer);
                    await hubConnection.SendAsync("SendAnswer", userInput, roomInput, answer);
                }
            }
            catch (Exception e)
            {
                messages.Add(e.Message);
            }

            StateHasChanged();
        });

        hubConnection.On<string, string, string>("ReceiveAnswerMessage", async (user, answer, message) =>
        {
            try
            {
                if (!string.Equals(userInput, user))
                {
                    messages.Add(message);
                    await this.Module.InvokeAsync<string>("setAnswer", answer);
                }
            }
            catch (Exception e)
            {
                messages.Add(e.Message);
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this.Module = await this.Js.InvokeAsync<IJSObjectReference>("import", $"./js/main.js?{Guid.NewGuid().ToString()}");
            await this.Module.InvokeAsync<string>("connect", DotNetObjectReference.Create(this));
        }
    }

    Task Send() => hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync() => await hubConnection.DisposeAsync();

    [JSInvokable]
    public async Task HandleCandidate(string icecandidate)
    {
        await this.Module.InvokeAsync<string>("handleCandidate", icecandidate);
    }

    async Task JoinRoom()
    {
        await hubConnection.SendAsync("JoinRoom", userInput, roomInput);
    }
}